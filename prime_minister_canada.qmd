---
title: "Life Span of the Prime Ministers of Canada"
author: "Kaavya Kalani"
thanks: "Code and data are available at: https://github.com/kaavyakalani26/prime_minister_canada.git"
date: today
date-format: long
format: pdf
number-sections: true
bibliography: references.bib
---

```{r}
#| message: false
#| echo: false

 
#### Preamble ####
# Purpose: Main Analysis 
# Author: Kaavya Kalani
# Date: 01 February 2024
# Contact: kaavya.kalani@mail.utoronto.ca
# License: MIT
# Pre-requisites: run load_data.R

#### Workspace setup ####
# install.packages("tidyverse")
# install.packages("xml2")
# install.packages("rvest")
# install.packages("dplyr")
# install.packages("knitr")
# install.packages("janitor")

library(rvest)
library(tidyverse)
library(dplyr)
library(knitr)
library(janitor)
library(xml2)

# read the html file
raw_data <- read_html("pms.html")
```

# Introduction and Data Source

In this analysis, the primary objective is to visually depict the average life spans of Canadian Prime Ministers. The dataset for this investigation is derived from the comprehensive information available on the official Wikipedia page dedicated to the list of Prime Ministers of Canada [https://en.wikipedia.org/wiki/List_of_prime_ministers_of_Canada](https://en.wikipedia.org/wiki/List_of_prime_ministers_of_Canada). 

# Process and Findings
This analysis consisted of me extracting data from Wikipedia, cleaning it and visualising it. This was done using the statistical programming software R [@citeR] along with the help of multiple libraries: rvest [@citeRvest], xml2 [@citeXml2], tidyverse [@citeTidyverse], janitor [@citeJanitor], knitr [@citeKnitr] and dplyr [@citeDplyr].

The analytical process initiated with data extraction from Wikipedia, using the rvest 
package to scrape information, subsequently creating a local backup of the page. I then looked for patterns in the HTML that we can use to help us get closer to the data that we want.

I then used SelectorGadget to choose the appropriate table on the page which was the second table. Following that I cleaned my data, focusing on retaining only the essential column while addressing duplicate entries, particularly relevant for prime ministers with multiple terms.

Next, I noticed a pattern in the way information was written in a specific column. I then split and extracted data into name, birth year, and death year for a more organized dataset. 

Finally, I calculated the age of all the Prime Ministers who have passed away and that was the last column of my final dataset.



```{r}
#| message: false
#| echo: false
#| label: tbl-cleaned_data
#| tbl-cap: Sample of cleaned Lifespan data

all_tables <-
  raw_data |>
  html_nodes(".wikitable")

parse_data_selector_gadget <- all_tables[[2]] |>
  html_table()

parsed_data <-
  parse_data_selector_gadget |> 
  clean_names() |> 
  rename(raw_text = name_birth_death) |> 
  select(raw_text) |> 
  filter(raw_text != "Name(Birth-Death") |> 
  distinct() 

initial_clean <-
  parsed_data |>
  separate(
    raw_text, into = c("name", "not_name"), sep = "\\(", extra = "merge",
  ) |> 
  mutate(date = str_extract(not_name, "[[:digit:]]{4}–[[:digit:]]{4}"),
         born = str_extract(not_name, "b.[[:space:]][[:digit:]]{4}")
  ) |>
  select(name, date, born)

cleaned_data <-
  initial_clean |>
  separate(date, into = c("birth", "died"), 
           sep = "–") |>   # PMs who have died have their birth and death years 
  # separated by a hyphen, but we need to be careful with the hyphen as it seems 
  # to be a slightly odd type of hyphen and we need to copy/paste it.
  mutate(
    born = str_remove_all(born, "b.[[:space:]]"),
    birth = if_else(!is.na(born), born, birth)
  ) |> # Alive PMs have slightly different format
  select(-born) |>
  rename(born = birth) |> 
  mutate(across(c(born, died), as.integer)) |> 
  mutate(Age_at_Death = died - born) |> 
  distinct() # Some of the PMs had two goes at it.

cleaned_data <- cleaned_data %>% slice(-n())

cleaned_data |>
  head() |>
  kable(
    col.names = c("Prime Minister", "Birth year", "Death year", "Age at death")
    )
```

@tbl-cleaned_data provides a glimpse into our cleaned dataset.

I then plot the data to visualise the life span of the prime ministers

```{r}
#| message: false
#| echo: false
#| label: fig-life_span
#| fig-cap: Life Span of the Prime Ministers of Canada

cleaned_data |>
  mutate(
    still_alive = if_else(is.na(died), "Yes", "No"),
    died = if_else(is.na(died), as.integer(2023), died)
  ) |>
  mutate(name = as_factor(name)) |>
  ggplot(
    aes(x = born, xend = died, y = name, yend = name, color = still_alive)
    ) +
  geom_segment() +
  labs(
    x = "Year of birth", y = "Prime minister", color = "PM is currently alive"
    ) +
  theme_minimal() +
  scale_color_brewer(palette = "Set1") +
  theme(legend.position = "bottom")

```

@fig-life_span plots the lifespan of the prime ministers of Canada

Looking at the graph, we can see that on an average, most of the lifespans are around 75-80 years. On statistically analysing, the data we find that, among people who have passed away, the mean is `r round(mean(cleaned_data$Age_at_Death, na.rm = TRUE))` years which is very close to what we infer from just looking at the graph. Additonally, smallest life span recorded is `r min(cleaned_data$Age_at_Death, na.rm = TRUE)` years and largest life span recorded is `r max(cleaned_data$Age_at_Death, na.rm = TRUE)` years.

# Experience with the process

## What took longer than expected?
Figuring out how to split the column information into different columns according to the specific formatting of the table took a long time.

## When did it become fun?
Once I was able to split the column in to appropriate columns, it was fun to calculate the age and plot the graph and visually see the information.

## What would you do differently next time?
Something I would do differently would be that I would understand and plan how to split the column before I code it. This time I essentially started coding and correcting and it wasn't working so I had to take a step back, see what the code is doing and write that part on my own again to make it work for the specific formatting of the table I extracted.

# References
